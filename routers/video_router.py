from fastapi import APIRouter, Request, HTTPException, Depends
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlmodel import Session, select
from typing import Optional
import os, secrets, string, time
import logging

# Configuration du logger
logger = logging.getLogger(__name__)

from ..core.database import get_session
from ..core.security import get_current_user
from ..models.base import User, RendezVous, Inscription, Candidat, Programme, Entreprise
from ..templates import templates
from ..core.utils import EmailUtils

# ===== Config =====
APP_NAME = os.getenv("APP_NAME", "LIA Coaching ‚Ä¢ Visioconf√©rence")
GOOGLE_MEET_DOMAIN = os.getenv("GOOGLE_MEET_DOMAIN", "meet.google.com")
DEFAULT_ROLE = os.getenv("DEFAULT_ROLE", "client")
DEFAULT_DISPLAY_NAME = os.getenv("DEFAULT_DISPLAY_NAME", "Invit√©")

# ===== Router init =====
router = APIRouter()
#templates = Jinja2Templates(directory="app/templates")

# ===== Utils =====
ALPHABET = string.ascii_lowercase + string.digits
def generate_meet_link() -> str:
    """G√©n√®re un lien de visioconf√©rence"""
    import random
    import string
    
    # Utiliser Jitsi Meet qui est plus flexible
    # G√©n√©rer un nom de salle unique
    chars = string.ascii_lowercase + string.digits
    room_name = ''.join(random.choice(chars) for _ in range(12))
    
    return f"https://meet.jit.si/lia-{room_name}"

def sanitize_name(name: Optional[str]) -> str:
    if not name:
        return DEFAULT_DISPLAY_NAME
    allowed = string.ascii_letters + string.digits + " -_.'‚Äô√©√®√™√†√ß√â√à√ä√Ä√á"
    return "".join(c for c in name if c in allowed)[:48]

# ===== Routes =====
@router.get("/video-rdv/{rdv_id}/commencer", response_class=HTMLResponse)
def commencer_rdv_video(
    request: Request,
    rdv_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Commencer un rendez-vous vid√©o"""
    
    logger.info(f"üé• D√©but commencer_rdv_video - RDV ID: {rdv_id}, User: {current_user.email}")
    
    try:
        # R√©cup√©rer le rendez-vous avec toutes les relations
        logger.info(f"üîç Recherche du RDV {rdv_id}...")
        query = select(RendezVous).where(RendezVous.id == rdv_id)
        rdv = session.exec(query).first()
        
        if not rdv:
            logger.error(f"‚ùå RDV {rdv_id} non trouv√©")
            raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
        
        logger.info(f"‚úÖ RDV trouv√©: {rdv.id}, statut: {rdv.statut}")
        
        # Charger les relations
        logger.info(f"üîç Chargement de l'inscription {rdv.inscription_id}...")
        inscription = session.get(Inscription, rdv.inscription_id)
        if not inscription:
            logger.error(f"‚ùå Inscription {rdv.inscription_id} non trouv√©e")
            raise HTTPException(status_code=404, detail="Inscription non trouv√©e")
        
        logger.info(f"‚úÖ Inscription trouv√©e: {inscription.id}")
        
        logger.info(f"üîç Chargement du candidat {inscription.candidat_id}...")
        candidat = session.get(Candidat, inscription.candidat_id)
        if not candidat:
            logger.error(f"‚ùå Candidat {inscription.candidat_id} non trouv√©")
            raise HTTPException(status_code=404, detail="Candidat non trouv√©")
        
        logger.info(f"‚úÖ Candidat trouv√©: {candidat.prenom} {candidat.nom}")
        
        logger.info(f"üîç Chargement du programme {inscription.programme_id}...")
        programme = session.get(Programme, inscription.programme_id)
        if not programme:
            logger.error(f"‚ùå Programme {inscription.programme_id} non trouv√©")
            raise HTTPException(status_code=404, detail="Programme non trouv√©")
        
        logger.info(f"‚úÖ Programme trouv√©: {programme.nom}")
        
        # R√©cup√©rer l'entreprise si elle existe
        logger.info(f"üîç Recherche de l'entreprise pour candidat {candidat.id}...")
        entreprise_query = select(Entreprise).where(Entreprise.candidat_id == candidat.id)
        entreprise = session.exec(entreprise_query).first()
        
        if entreprise:
            logger.info(f"‚úÖ Entreprise trouv√©e: {entreprise.raison_sociale}")
        else:
            logger.info("‚ÑπÔ∏è Aucune entreprise trouv√©e pour ce candidat")
        
        # V√©rifier les permissions (seul le conseiller ou admin peut commencer)
        logger.info(f"üîç V√©rification des permissions - User role: {current_user.role}, RDV conseiller: {rdv.conseiller_id}")
        if current_user.role not in ["administrateur", "coordinateur"] and rdv.conseiller_id != current_user.id:
            logger.error(f"‚ùå Permission refus√©e pour {current_user.email}")
            raise HTTPException(status_code=403, detail="Vous n'avez pas l'autorisation de commencer ce rendez-vous")
        
        logger.info("‚úÖ Permissions valid√©es")
        
        # R√©cup√©rer le nom du conseiller
        logger.info(f"üîç Chargement du conseiller {rdv.conseiller_id}...")
        conseiller = session.get(User, rdv.conseiller_id)
        conseiller_nom = conseiller.nom_complet if conseiller else "Conseiller non assign√©"
        logger.info(f"‚úÖ Conseiller trouv√©: {conseiller_nom}")
        
        # G√©n√©rer un lien de visioconf√©rence unique (seulement si pas d√©j√† cr√©√©)
        if not rdv.meet_link:
            meet_link = generate_meet_link()
            rdv.meet_link = meet_link
            logger.info(f"üéØ Nouveau lien Jitsi g√©n√©r√©: {meet_link}")
        else:
            meet_link = rdv.meet_link
            logger.info(f"üîÑ Utilisation du lien existant: {meet_link}")
        
        # Mettre √† jour le statut du rendez-vous
        logger.info(f"üìù Mise √† jour du statut RDV {rdv_id} vers 'en_cours'...")
        rdv.statut = "en_cours"
        session.add(rdv)
        session.commit()
        logger.info("‚úÖ Statut mis √† jour avec succ√®s")
        
        # Pr√©parer les donn√©es pour la visioconf√©rence
        logger.info("üé¨ Pr√©paration du contexte pour le template...")
        ctx = {
            "request": request,
            "rdv": rdv,
            "candidat_prenom": candidat.prenom,
            "candidat_nom": candidat.nom,
            "programme_nom": programme.nom,
            "entreprise_nom": entreprise.raison_sociale if entreprise else None,
            "meet_link": meet_link,  # Lien complet pour partage
            "room_name": meet_link.split('/')[-1],  # Nom de la salle pour Jitsi
            "display_name": current_user.nom_complet,
            "conseiller_nom": conseiller_nom,
            "role": "conseiller",
            "is_host": True,  # Le conseiller est l'h√¥te
            "google_meet_domain": GOOGLE_MEET_DOMAIN,
            "app_name": APP_NAME,
            "current_user": current_user
        }
        
        logger.info(f"‚úÖ Contexte pr√©par√© - Template: video_rdv/google_meet.html")
        logger.info(f"üéâ Commencer RDV vid√©o r√©ussi pour {candidat.prenom} {candidat.nom}")
        
        return templates.TemplateResponse("video_rdv/seance_jitsi.html", ctx)
        
    except HTTPException as e:
        logger.error(f"‚ùå HTTPException dans commencer_rdv_video: {e.detail}")
        raise
    except Exception as e:
        logger.error(f"üí• Erreur inattendue dans commencer_rdv_video: {str(e)}")
        logger.error(f"üí• Type d'erreur: {type(e).__name__}")
        import traceback
        logger.error(f"üí• Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.get("/video-rdv/{rdv_id}/invitation/{token}")
def generer_lien_invitation(
    request: Request,
    rdv_id: int,
    token: str,
    session: Session = Depends(get_session)
):
    """G√©n√®re un lien d'invitation pour le candidat (sans authentification)"""
    logger.info(f"üîó G√©n√©ration lien invitation - RDV ID: {rdv_id}, Token: {token}")
    
    try:
        # V√©rifier le token (simple pour l'instant)
        if token != "candidat":
            raise HTTPException(status_code=403, detail="Token invalide")
        
        query = select(RendezVous).where(RendezVous.id == rdv_id)
        rdv = session.exec(query).first()
        
        if not rdv:
            raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
        
        if rdv.statut not in ["planifie", "en_cours"]:
            raise HTTPException(status_code=400, detail="Rendez-vous non disponible")
        
        # Charger les donn√©es n√©cessaires
        inscription = session.get(Inscription, rdv.inscription_id)
        candidat = session.get(Candidat, inscription.candidat_id)
        programme = session.get(Programme, inscription.programme_id)
        entreprise = session.exec(
            select(Entreprise).where(Entreprise.candidat_id == candidat.id)
        ).first()
        
        # R√©cup√©rer le nom du conseiller
        conseiller_nom = "Conseiller non assign√©"
        if rdv.conseiller_id:
            conseiller = session.get(User, rdv.conseiller_id)
            if conseiller:
                conseiller_nom = conseiller.nom_complet
        
        # Utiliser le lien existant ou en cr√©er un nouveau
        if not rdv.meet_link:
            meet_link = generate_meet_link()
            rdv.meet_link = meet_link
            session.add(rdv)
            session.commit()
        else:
            meet_link = rdv.meet_link
        
        ctx = {
            "request": request,
            "rdv": rdv,
            "candidat_prenom": candidat.prenom,
            "candidat_nom": candidat.nom,
            "programme_nom": programme.nom,
            "entreprise_nom": entreprise.raison_sociale if entreprise else None,
            "meet_link": meet_link,  # Lien complet pour partage
            "room_name": meet_link.split('/')[-1],  # Nom de la salle pour Jitsi
            "display_name": f"{candidat.prenom} {candidat.nom}",
            "conseiller_nom": conseiller_nom,
            "role": "candidat",
            "is_host": False,  # Le candidat n'est jamais h√¥te
            "google_meet_domain": GOOGLE_MEET_DOMAIN,
            "app_name": APP_NAME,
            "current_user": None  # Pas d'utilisateur connect√©
        }
        
        logger.info(f"‚úÖ Lien d'invitation g√©n√©r√© pour {candidat.prenom} {candidat.nom}")
        return templates.TemplateResponse("video_rdv/seance_jitsi.html", ctx)
        
    except HTTPException as e:
        logger.error(f"‚ùå HTTPException dans generer_lien_invitation: {e.detail}")
        raise
    except Exception as e:
        logger.error(f"üí• Erreur inattendue dans generer_lien_invitation: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.get("/video-rdv/{rdv_id}/rejoindre", response_class=HTMLResponse)
def rejoindre_rdv_video(
    request: Request,
    rdv_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Rejoindre un rendez-vous vid√©o en cours"""
    
    # R√©cup√©rer le rendez-vous avec toutes les relations
    query = select(RendezVous).where(RendezVous.id == rdv_id)
    rdv = session.exec(query).first()
    
    if not rdv:
        raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
    
    # Charger les relations
    inscription = session.get(Inscription, rdv.inscription_id)
    if not inscription:
        raise HTTPException(status_code=404, detail="Inscription non trouv√©e")
    
    candidat = session.get(Candidat, inscription.candidat_id)
    programme = session.get(Programme, inscription.programme_id)
    
    # R√©cup√©rer l'entreprise si elle existe
    entreprise_query = select(Entreprise).where(Entreprise.candidat_id == candidat.id)
    entreprise = session.exec(entreprise_query).first()
    
    # R√©cup√©rer le nom du conseiller
    conseiller_nom = "Conseiller non assign√©"
    if rdv.conseiller_id:
        conseiller = session.get(User, rdv.conseiller_id)
        if conseiller:
            conseiller_nom = conseiller.nom_complet
    
    # V√©rifier que le RDV est en cours
    if rdv.statut != "en_cours":
        raise HTTPException(status_code=400, detail="Ce rendez-vous n'est pas en cours")
    
    # Utiliser le lien existant ou en cr√©er un nouveau
    if not rdv.meet_link:
        meet_link = generate_meet_link()
        rdv.meet_link = meet_link
        session.add(rdv)
        session.commit()
    else:
        meet_link = rdv.meet_link
    
    # D√©terminer le r√¥le de l'utilisateur
    if rdv.conseiller_id == current_user.id:
        role = "conseiller"
    else:
        role = "candidat"
    
    ctx = {
        "request": request,
        "rdv": rdv,
        "candidat_prenom": candidat.prenom,
        "candidat_nom": candidat.nom,
        "programme_nom": programme.nom,
        "entreprise_nom": entreprise.raison_sociale if entreprise else None,
        "meet_link": meet_link,
        "display_name": current_user.nom_complet,
        "conseiller_nom": conseiller_nom,
        "role": role,
        "is_host": (role == "conseiller"),  # Seul le conseiller est h√¥te
        "google_meet_domain": GOOGLE_MEET_DOMAIN,
        "app_name": APP_NAME,
        "current_user": current_user
    }
    
    return templates.TemplateResponse("video_rdv/seance_jitsi.html", ctx)

@router.post("/video-rdv/{rdv_id}/terminer")
def terminer_rdv_video(
    rdv_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Terminer un rendez-vous vid√©o"""
    
    # R√©cup√©rer le rendez-vous
    rdv = session.get(RendezVous, rdv_id)
    if not rdv:
        raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
    
    # V√©rifier les permissions
    if current_user.role not in ["administrateur", "coordinateur"] and rdv.conseiller_id != current_user.id:
        raise HTTPException(status_code=403, detail="Vous n'avez pas l'autorisation de terminer ce rendez-vous")
    
    # Mettre √† jour le statut
    rdv.statut = "termine"
    session.add(rdv)
    session.commit()
    
    return {"message": "Rendez-vous termin√© avec succ√®s", "status": "success"}

@router.get("/video-rdv/{rdv_id}/notes")
def recuperer_notes(
    rdv_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """R√©cup√©rer les notes d'un rendez-vous"""
    logger.info(f"üìñ R√©cup√©ration notes - RDV ID: {rdv_id}, User: {current_user.email}")
    
    try:
        rdv = session.get(RendezVous, rdv_id)
        if not rdv:
            raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
        
        # V√©rifier les permissions
        if current_user.role not in ["administrateur", "coordinateur"] and rdv.conseiller_id != current_user.id:
            raise HTTPException(status_code=403, detail="Vous n'avez pas l'autorisation de voir ce rendez-vous")
        
        logger.info(f"‚úÖ Notes r√©cup√©r√©es pour RDV {rdv_id}")
        return {
            "status": "success", 
            "notes": rdv.notes or "",
            "rdv_id": rdv_id,
            "statut": rdv.statut,
            "date_rdv": rdv.debut.strftime("%d/%m/%Y √† %H:%M") if rdv.debut else "Non d√©finie"
        }
        
    except HTTPException as e:
        logger.error(f"‚ùå HTTPException dans recuperer_notes: {e.detail}")
        raise
    except Exception as e:
        logger.error(f"üí• Erreur inattendue dans recuperer_notes: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.post("/video-rdv/{rdv_id}/notes")
def sauvegarder_notes(
    rdv_id: int,
    notes_data: dict,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Sauvegarder les notes d'un rendez-vous"""
    logger.info(f"üìù Sauvegarde notes - RDV ID: {rdv_id}, User: {current_user.email}")
    
    try:
        rdv = session.get(RendezVous, rdv_id)
        if not rdv:
            raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
        
        # V√©rifier les permissions
        if current_user.role not in ["administrateur", "coordinateur"] and rdv.conseiller_id != current_user.id:
            raise HTTPException(status_code=403, detail="Vous n'avez pas l'autorisation de modifier ce rendez-vous")
        
        # Mettre √† jour les notes
        notes_content = notes_data.get("notes", "")
        rdv.notes = notes_content
        
        session.add(rdv)
        session.commit()
        
        logger.info(f"‚úÖ Notes sauvegard√©es pour RDV {rdv_id}")
        return {"status": "success", "message": "Notes sauvegard√©es avec succ√®s"}
        
    except HTTPException as e:
        logger.error(f"‚ùå HTTPException dans sauvegarder_notes: {e.detail}")
        raise
    except Exception as e:
        logger.error(f"üí• Erreur inattendue dans sauvegarder_notes: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.get("/video-rdv/{rdv_id}/notes")
def recuperer_notes(
    rdv_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """R√©cup√©rer les notes d'un rendez-vous"""
    logger.info(f"üìñ R√©cup√©ration notes - RDV ID: {rdv_id}, User: {current_user.email}")
    
    try:
        rdv = session.get(RendezVous, rdv_id)
        if not rdv:
            raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
        
        # V√©rifier les permissions
        if current_user.role not in ["administrateur", "coordinateur"] and rdv.conseiller_id != current_user.id:
            raise HTTPException(status_code=403, detail="Vous n'avez pas l'autorisation de consulter ce rendez-vous")
        
        logger.info(f"‚úÖ Notes r√©cup√©r√©es pour RDV {rdv_id}")
        return {"status": "success", "notes": rdv.notes or ""}
        
    except HTTPException as e:
        logger.error(f"‚ùå HTTPException dans recuperer_notes: {e.detail}")
        raise
    except Exception as e:
        logger.error(f"üí• Erreur inattendue dans recuperer_notes: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.post("/video-rdv/{rdv_id}/envoyer-invitation")
def envoyer_invitation_email(
    rdv_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Envoyer l'invitation par email au candidat"""
    logger.info(f"üìß Envoi invitation email - RDV ID: {rdv_id}, User: {current_user.email}")
    
    try:
        # R√©cup√©rer le rendez-vous avec toutes les relations
        query = select(RendezVous).where(RendezVous.id == rdv_id)
        rdv = session.exec(query).first()
        
        if not rdv:
            raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
        
        # V√©rifier les permissions
        if current_user.role not in ["administrateur", "coordinateur"] and rdv.conseiller_id != current_user.id:
            raise HTTPException(status_code=403, detail="Vous n'avez pas l'autorisation d'envoyer des invitations pour ce rendez-vous")
        
        # Charger les donn√©es n√©cessaires
        inscription = session.get(Inscription, rdv.inscription_id)
        candidat = session.get(Candidat, inscription.candidat_id)
        programme = session.get(Programme, inscription.programme_id)
        
        # R√©cup√©rer le nom du conseiller
        conseiller_nom = "Conseiller non assign√©"
        if rdv.conseiller_id:
            conseiller = session.get(User, rdv.conseiller_id)
            if conseiller:
                conseiller_nom = conseiller.nom_complet
        
        if not candidat.email:
            raise HTTPException(status_code=400, detail="Aucune adresse email trouv√©e pour ce candidat")
        
        # Formater la date
        rdv_date = rdv.debut.strftime('%d/%m/%Y √† %H:%M')
        
        # Envoyer l'email
        success = EmailUtils.send_rdv_invitation(
            to_email=candidat.email,
            candidat_nom=candidat.nom,
            candidat_prenom=candidat.prenom,
            rdv_id=rdv_id,
            rdv_date=rdv_date,
            rdv_type=rdv.type_rdv.title(),
            programme_nom=programme.nom,
            conseiller_nom=conseiller_nom
        )
        
        if success:
            logger.info(f"‚úÖ Invitation email envoy√©e √† {candidat.email} pour RDV {rdv_id}")
            return {"status": "success", "message": f"Invitation envoy√©e √† {candidat.email}"}
        else:
            raise HTTPException(status_code=500, detail="Erreur lors de l'envoi de l'email")
        
    except HTTPException as e:
        logger.error(f"‚ùå HTTPException dans envoyer_invitation_email: {e.detail}")
        raise
    except Exception as e:
        logger.error(f"üí• Erreur inattendue dans envoyer_invitation_email: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")


@router.post("/video-rdv/{rdv_id}/terminer")
def terminer_rdv(
    rdv_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Terminer un rendez-vous et mettre √† jour le statut"""
    try:
        logger.info(f"üîÑ Tentative de finalisation du RDV {rdv_id} par {current_user.nom_complet}")
        
        # R√©cup√©rer le rendez-vous
        rdv = session.get(RendezVous, rdv_id)
        if not rdv:
            logger.error(f"‚ùå RDV {rdv_id} non trouv√©")
            raise HTTPException(status_code=404, detail="Rendez-vous non trouv√©")
        
        # V√©rifier les permissions
        if current_user.role != UserRole.ADMIN and current_user.id != rdv.conseiller_id:
            logger.error(f"‚ùå Permission refus√©e pour {current_user.nom_complet} sur RDV {rdv_id}")
            raise HTTPException(status_code=403, detail="Permission refus√©e")
        
        # Mettre √† jour le statut
        rdv.statut = "termine"
        rdv.fin = datetime.now()
        
        session.add(rdv)
        session.commit()
        
        logger.info(f"‚úÖ RDV {rdv_id} termin√© avec succ√®s par {current_user.nom_complet}")
        return {"status": "success", "message": "Rendez-vous termin√© avec succ√®s"}
        
    except HTTPException as e:
        logger.error(f"‚ùå HTTPException dans terminer_rdv: {e.detail}")
        raise
    except Exception as e:
        logger.error(f"üí• Erreur inattendue dans terminer_rdv: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")



