#!/usr/bin/env python3
"""
Script de d√©marrage pour cr√©er les sch√©mas par programme
"""
import subprocess
import sys
from pathlib import Path
from core.config import settings

def run_sql_script():
    """Ex√©cute le script SQL pour cr√©er les sch√©mas"""
    script_path = Path(__file__).parent / "scripts" / "create_program_schemas_with_existing_models.sql"
    
    if not script_path.exists():
        print(f"‚ùå Script SQL non trouv√©: {script_path}")
        return False
    
    print(f"üìÑ Ex√©cution du script SQL: {script_path}")
    
    # Configuration par d√©faut (√† adapter selon votre environnement)
    db_host = settings.PGHOST
    db_port = settings.PGPORT
    db_name = settings.PGDATABASE
    db_user = settings.PGUSER
    db_password = settings.PGPASSWORD
    
    # Commande psql
    cmd = [
        "psql",
        "-h", db_host,
        "-p", db_port,
        "-U", db_user,
        "-d", db_name,
        "-f", str(script_path)
    ]
    
    # D√©finir le mot de passe
    env["PGPASSWORD"] = db_password
    
    try:
        print(f"üîÑ Ex√©cution de la commande: {' '.join(cmd)}")
        result = subprocess.run(cmd, env=env, check=True, capture_output=True, text=True)
        
        print("‚úÖ Script SQL ex√©cut√© avec succ√®s!")
        
        if result.stdout:
            print("\nüìã Sortie du script:")
            print(result.stdout)
        
        if result.stderr:
            print("\n‚ö†Ô∏è Avertissements:")
            print(result.stderr)
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du script SQL:")
        print(f"Code de retour: {e.returncode}")
        
        if e.stdout:
            print(f"\nüìã Sortie:")
            print(e.stdout)
        
        if e.stderr:
            print(f"\n‚ùå Erreur:")
            print(e.stderr)
        
        return False
    
    except FileNotFoundError:
        print("‚ùå psql non trouv√© dans le PATH")
        print("üí° Assurez-vous que PostgreSQL est install√© et que psql est accessible")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Cr√©ation des sch√©mas par programme")
    print("=" * 40)
    
    # V√©rifier que psql est disponible
    psql_path = subprocess.which("psql")
    if not psql_path:
        print("‚ùå psql non trouv√© dans le PATH")
        print("üí° Installez PostgreSQL ou ajoutez psql au PATH")
        sys.exit(1)
    
    print(f"‚úÖ psql trouv√©: {psql_path}")
    
    # Ex√©cuter le script SQL
    success = run_sql_script()
    
    if success:
        print("\nüéâ Sch√©mas cr√©√©s avec succ√®s!")
        print("\nüìù Prochaines √©tapes:")
        print("1. D√©marrer l'application: python -m app_lia_web.app.main")
        print("2. Acc√©der √† l'interface d'administration: http://localhost:8000/admin/schemas")
        print("3. Migrer les donn√©es existantes par programme")
        print("4. Tester les fonctionnalit√©s avec les nouveaux sch√©mas")
        sys.exit(0)
    else:
        print("\n‚ùå √âchec de la cr√©ation des sch√©mas")
        print("\nüîß Actions recommand√©es:")
        print("1. V√©rifier la connexion √† la base de donn√©es")
        print("2. V√©rifier les permissions de l'utilisateur de base de donn√©es")
        print("3. V√©rifier que la base de donn√©es existe")
        print("4. Ex√©cuter le script manuellement avec psql")
        sys.exit(1)

if __name__ == "__main__":
    main()
