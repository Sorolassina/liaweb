#!/usr/bin/env python3
"""
Script de test pour le syst√®me de Cod√©veloppement
"""
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))

from sqlmodel import Session, select
from app_lia_web.core.database import get_session
from app_lia_web.app.models.codev import CycleCodev, GroupeCodev, SeanceCodev
from app_lia_web.app.models.base import Programme, Groupe, User
from app_lia_web.app.models.enums import StatutCycleCodev, StatutGroupeCodev
from app_lia_web.app.services.codev_service import CodevService
from datetime import datetime, timezone, date, timedelta

def test_codev_system():
    """Test complet du syst√®me de cod√©veloppement"""
    print("üß™ Test du syst√®me de Cod√©veloppement")
    print("=" * 50)
    
    session = next(get_session())
    
    try:
        # 1. Test de cr√©ation d'un cycle
        print("\n1Ô∏è‚É£ Cr√©ation d'un cycle de cod√©veloppement...")
        
        # R√©cup√©rer le premier programme
        programme = session.exec(select(Programme).limit(1)).first()
        if not programme:
            print("‚ùå Aucun programme trouv√©. Cr√©er d'abord un programme.")
            return False
        
        cycle = CodevService.create_cycle_codev(
            session=session,
            nom="Cycle Test ACD 2024",
            programme_id=programme.id,
            date_debut=date.today(),
            date_fin=date.today() + timedelta(weeks=12),
            nombre_seances=6
        )
        print(f"‚úÖ Cycle cr√©√©: {cycle.nom} (ID: {cycle.id})")
        
        # 2. Test de cr√©ation d'un groupe
        print("\n2Ô∏è‚É£ Cr√©ation d'un groupe de cod√©veloppement...")
        
        # R√©cup√©rer le premier groupe
        groupe = session.exec(select(Groupe).limit(1)).first()
        if not groupe:
            print("‚ùå Aucun groupe trouv√©. Cr√©er d'abord un groupe.")
            return False
        
        groupe_codev = CodevService.create_groupe_codev(
            session=session,
            cycle_id=cycle.id,
            groupe_id=groupe.id,
            nom_groupe="Groupe Alpha - Cycle Test",
            capacite_max=12
        )
        print(f"‚úÖ Groupe cr√©√©: {groupe_codev.nom_groupe} (ID: {groupe_codev.id})")
        
        # 3. Test de cr√©ation d'une s√©ance
        print("\n3Ô∏è‚É£ Cr√©ation d'une s√©ance de cod√©veloppement...")
        
        seance = CodevService.create_seance_codev(
            session=session,
            groupe_id=groupe.id,
            numero_seance=1,
            date_seance=datetime.now(timezone.utc) + timedelta(days=7),
            lieu="Salle de formation LIA",
            duree_minutes=180
        )
        print(f"‚úÖ S√©ance cr√©√©e: S√©ance {seance.numero_seance} (ID: {seance.id})")
        
        # 4. Test des statistiques
        print("\n4Ô∏è‚É£ Test des statistiques...")
        
        stats = CodevService.get_statistiques_cycle(session, cycle.id)
        print(f"‚úÖ Statistiques du cycle:")
        print(f"   - Nombre de groupes: {stats['nb_groupes']}")
        print(f"   - Nombre de membres: {stats['nb_membres']}")
        print(f"   - Nombre de s√©ances: {stats['nb_seances']}")
        print(f"   - Taux de r√©alisation: {stats['taux_realisation']:.1f}%")
        
        # 5. Test de r√©cup√©ration des prochaines s√©ances
        print("\n5Ô∏è‚É£ Test des prochaines s√©ances...")
        
        prochaines_seances = CodevService.get_prochaines_seances(session, limit=5)
        print(f"‚úÖ Prochaines s√©ances trouv√©es: {len(prochaines_seances)}")
        
        for seance in prochaines_seances:
            print(f"   - S√©ance {seance.numero_seance}: {seance.date_seance.strftime('%d/%m/%Y √† %H:%M')}")
        
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        session.close()

def test_permissions():
    """Test des permissions pour le module Codev"""
    print("\nüîê Test des permissions Codev...")
    
    # R√¥les autoris√©s pour le Codev
    roles_autorises = [
        "administrateur",
        "directeur_technique", 
        "responsable_programme",
        "coordinateur",
        "conseiller",
        "formateur"
    ]
    
    print(f"‚úÖ R√¥les autoris√©s pour le Codev: {', '.join(roles_autorises)}")
    
    # R√¥les non autoris√©s
    roles_non_autorises = [
        "candidat",
        "jury_externe",
        "coach_externe"
    ]
    
    print(f"‚ùå R√¥les non autoris√©s: {', '.join(roles_non_autorises)}")

def test_data_structure():
    """Test de la structure des donn√©es"""
    print("\nüìä Test de la structure des donn√©es...")
    
    session = next(get_session())
    
    try:
        # V√©rifier les tables
        tables_codev = [
            "cyclecodev",
            "groupecodev", 
            "membregroupecodev",
            "seancecodev",
            "presentationcodev",
            "contributioncodev",
            "participationseance"
        ]
        
        for table in tables_codev:
            result = session.exec(f"SELECT COUNT(*) FROM {table}").first()
            print(f"‚úÖ Table {table}: {result} enregistrements")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des tables: {e}")
        return False
    
    finally:
        session.close()

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests du syst√®me de Cod√©veloppement")
    print("=" * 60)
    
    # Tests
    success = True
    
    # Test de la structure des donn√©es
    if not test_data_structure():
        success = False
    
    # Test des permissions
    test_permissions()
    
    # Test du syst√®me principal
    if not test_codev_system():
        success = False
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ Tous les tests sont pass√©s avec succ√®s!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Ex√©cuter la migration SQL: scripts/migrate_codev_system.sql")
        print("2. Red√©marrer l'application")
        print("3. Acc√©der √† /codev pour tester l'interface")
    else:
        print("‚ùå Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    sys.exit(0 if success else 1)
