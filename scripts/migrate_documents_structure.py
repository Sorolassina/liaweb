#!/usr/bin/env python3
"""
Script pour migrer les documents existants vers la nouvelle structure par candidat.
Ce script r√©organise les documents dans des dossiers sp√©cifiques par candidat.
"""

import os
import sys
import shutil
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))

from sqlmodel import create_engine, Session, select
from models.base import Document
from core.config import settings

def migrate_documents_structure():
    """Migre les documents vers la nouvelle structure par candidat."""
    print("üîÑ D√©but de la migration des documents vers la structure par candidat...")
    
    engine = create_engine(settings.DATABASE_URL)
    
    with Session(engine) as session:
        # R√©cup√©rer tous les documents
        documents = session.exec(select(Document)).all()
        
        if not documents:
            print("‚ÑπÔ∏è Aucun document √† migrer.")
            return
        
        print(f"üìÑ {len(documents)} documents trouv√©s √† migrer.")
        
        # Grouper par candidat
        candidats_docs = {}
        for doc in documents:
            if doc.candidat_id not in candidats_docs:
                candidats_docs[doc.candidat_id] = []
            candidats_docs[doc.candidat_id].append(doc)
        
        print(f"üë• {len(candidats_docs)} candidats avec des documents.")
        
        # Cr√©er les dossiers et migrer les fichiers
        for candidat_id, docs in candidats_docs.items():
            print(f"\nüë§ Migration des documents du candidat {candidat_id}...")
            
            # Cr√©er le dossier du candidat
            candidat_dir = settings.FICHIERS_DIR / "documents" / f"candidat_{candidat_id}"
            candidat_dir.mkdir(parents=True, exist_ok=True)
            print(f"üìÅ Dossier cr√©√©: {candidat_dir}")
            
            # Migrer chaque document
            for doc in docs:
                if not doc.chemin_fichier:
                    print(f"‚ö†Ô∏è Document {doc.id} sans chemin de fichier, ignor√©.")
                    continue
                
                old_path = Path(doc.chemin_fichier)
                if not old_path.exists():
                    print(f"‚ö†Ô∏è Fichier {old_path} introuvable, ignor√©.")
                    continue
                
                # Nouveau nom de fichier
                file_ext = old_path.suffix.lower() or ".pdf"
                new_filename = f"{doc.type_document.value.lower()}_{candidat_id}{file_ext}"
                new_path = candidat_dir / new_filename
                
                # G√©rer les doublons
                counter = 1
                while new_path.exists():
                    name_without_ext = f"{doc.type_document.value.lower()}_{candidat_id}"
                    new_filename = f"{name_without_ext}_{counter}{file_ext}"
                    new_path = candidat_dir / new_filename
                    counter += 1
                
                try:
                    # D√©placer le fichier
                    shutil.move(str(old_path), str(new_path))
                    
                    # Mettre √† jour le chemin en base
                    doc.chemin_fichier = str(new_path)
                    session.add(doc)
                    
                    print(f"‚úÖ Migr√©: {old_path.name} ‚Üí {new_filename}")
                    
                except Exception as e:
                    print(f"‚ùå Erreur lors de la migration de {old_path}: {e}")
        
        # Sauvegarder les changements
        session.commit()
        print(f"\nüéâ Migration termin√©e ! {len(documents)} documents migr√©s.")
        
        # Nettoyer les anciens dossiers vides
        documents_root = settings.FICHIERS_DIR / "documents"
        for item in documents_root.iterdir():
            if item.is_dir() and not any(item.iterdir()):
                print(f"üóëÔ∏è Suppression du dossier vide: {item}")
                item.rmdir()

if __name__ == "__main__":
    migrate_documents_structure()
