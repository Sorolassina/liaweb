#!/usr/bin/env python3
"""
Script Python pour corriger les statuts par d√©faut dans la base de donn√©es
Applique la nouvelle logique : en_attente par d√©faut pour les √©v√©nements futurs
"""

from sqlmodel import Session, text
from app_lia_web.core.database import get_session
from datetime import date

def fix_default_status():
    """Corrige les statuts par d√©faut selon la nouvelle logique"""
    
    print("üîß CORRECTION DES STATUTS PAR D√âFAUT")
    print("=" * 60)
    
    session = next(get_session())
    
    try:
        # 1. CORRECTION DES S√âMINAIRES
        print("üìö Correction des s√©minaires...")
        
        # Mettre 'en_attente' pour les √©v√©nements futurs avec invitation accept√©e
        query1 = text("""
            UPDATE presenceseminaire 
            SET presence = 'en_attente'
            WHERE presence = 'absent' 
              AND session_id IN (
                SELECT s.id 
                FROM sessionseminaire s 
                WHERE s.date_session >= CURRENT_DATE
              )
              AND inscription_id IN (
                SELECT i.inscription_id 
                FROM invitationseminaire i 
                WHERE i.statut = 'ACCEPTEE'
              )
        """)
        
        result1 = session.exec(query1)
        session.commit()
        print(f"   ‚úÖ S√©minaires futurs accept√©s: {result1.rowcount} mises √† jour")
        
        # Garder 'absent' pour les invitations refus√©es
        query2 = text("""
            UPDATE presenceseminaire 
            SET presence = 'absent'
            WHERE presence = 'en_attente'
              AND session_id IN (
                SELECT s.id 
                FROM sessionseminaire s 
                WHERE s.date_session >= CURRENT_DATE
              )
              AND inscription_id IN (
                SELECT i.inscription_id 
                FROM invitationseminaire i 
                WHERE i.statut = 'REFUSEE'
              )
        """)
        
        result2 = session.exec(query2)
        session.commit()
        print(f"   ‚úÖ S√©minaires futurs refus√©s: {result2.rowcount} mises √† jour")
        
        # Mettre 'absent' pour les √©v√©nements pass√©s sans signature
        query3 = text("""
            UPDATE presenceseminaire 
            SET presence = 'absent'
            WHERE presence = 'en_attente'
              AND session_id IN (
                SELECT s.id 
                FROM sessionseminaire s 
                WHERE s.date_session < CURRENT_DATE
              )
              AND (signature_digitale IS NULL OR signature_digitale = '')
              AND (signature_manuelle IS NULL OR signature_manuelle = '')
        """)
        
        result3 = session.exec(query3)
        session.commit()
        print(f"   ‚úÖ S√©minaires pass√©s sans signature: {result3.rowcount} mises √† jour")
        
        # 2. CORRECTION DES √âV√âNEMENTS
        print("\nüéØ Correction des √©v√©nements...")
        
        # Mettre 'en_attente' pour les √©v√©nements futurs avec invitation accept√©e
        query4 = text("""
            UPDATE presence_events 
            SET presence = 'en_attente'
            WHERE presence = 'absent' 
              AND event_id IN (
                SELECT e.id 
                FROM events e 
                WHERE e.date_fin >= CURRENT_DATE
              )
              AND inscription_id IN (
                SELECT i.inscription_id 
                FROM invitation_events i 
                WHERE i.statut = 'acceptee'
              )
        """)
        
        result4 = session.exec(query4)
        session.commit()
        print(f"   ‚úÖ √âv√©nements futurs accept√©s: {result4.rowcount} mises √† jour")
        
        # Garder 'absent' pour les invitations refus√©es
        query5 = text("""
            UPDATE presence_events 
            SET presence = 'absent'
            WHERE presence = 'en_attente'
              AND event_id IN (
                SELECT e.id 
                FROM events e 
                WHERE e.date_fin >= CURRENT_DATE
              )
              AND inscription_id IN (
                SELECT i.inscription_id 
                FROM invitation_events i 
                WHERE i.statut = 'refusee'
              )
        """)
        
        result5 = session.exec(query5)
        session.commit()
        print(f"   ‚úÖ √âv√©nements futurs refus√©s: {result5.rowcount} mises √† jour")
        
        # Mettre 'absent' pour les √©v√©nements pass√©s sans signature
        query6 = text("""
            UPDATE presence_events 
            SET presence = 'absent'
            WHERE presence = 'en_attente'
              AND event_id IN (
                SELECT e.id 
                FROM events e 
                WHERE e.date_fin < CURRENT_DATE
              )
              AND (signature_digitale IS NULL OR signature_digitale = '')
              AND (signature_manuelle IS NULL OR signature_manuelle = '')
        """)
        
        result6 = session.exec(query6)
        session.commit()
        print(f"   ‚úÖ √âv√©nements pass√©s sans signature: {result6.rowcount} mises √† jour")
        
        # 3. V√âRIFICATION DES R√âSULTATS
        print("\nüìä V√©rification des r√©sultats...")
        
        # Statistiques des s√©minaires
        stats_seminaires = session.exec(text("""
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN presence = 'present' THEN 1 END) as present,
                COUNT(CASE WHEN presence = 'absent' THEN 1 END) as absent,
                COUNT(CASE WHEN presence = 'excuse' THEN 1 END) as excuse,
                COUNT(CASE WHEN presence = 'en_attente' THEN 1 END) as en_attente
            FROM presenceseminaire
        """)).first()
        
        print(f"üìö S√©minaires: Total={stats_seminaires[0]}, Pr√©sent={stats_seminaires[1]}, Absent={stats_seminaires[2]}, Excus√©={stats_seminaires[3]}, En attente={stats_seminaires[4]}")
        
        # Statistiques des √©v√©nements
        stats_events = session.exec(text("""
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN presence = 'present' THEN 1 END) as present,
                COUNT(CASE WHEN presence = 'absent' THEN 1 END) as absent,
                COUNT(CASE WHEN presence = 'excuse' THEN 1 END) as excuse,
                COUNT(CASE WHEN presence = 'en_attente' THEN 1 END) as en_attente
            FROM presence_events
        """)).first()
        
        print(f"üéØ √âv√©nements: Total={stats_events[0]}, Pr√©sent={stats_events[1]}, Absent={stats_events[2]}, Excus√©={stats_events[3]}, En attente={stats_events[4]}")
        
        print("\n‚úÖ Correction termin√©e avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        session.rollback()
        import traceback
        traceback.print_exc()
    
    finally:
        session.close()

if __name__ == "__main__":
    fix_default_status()
